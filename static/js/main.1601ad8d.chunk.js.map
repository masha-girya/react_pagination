{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","React","memo","total","perPage","currentPage","onPageChange","amountOfPages","Math","ceil","isFirstPage","isLastPage","isPrevPage","isNextPage","className","classNames","disabled","href","onClick","pages","i","push","visiblePages","map","page","isCurrentPage","active","initialItems","from","to","numbers","n","getNumbers","App","useState","setPerPage","setCurrentPage","changePage","useCallback","itemsOnPage","currPage","itemsPerPage","itemStart","itemEnd","filter","visibleItems","useMemo","length","id","value","onChange","event","Number","target","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1601ad8d.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\ninterface Props {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n}\n\nexport const Pagination: React.FC<Props> = React.memo(({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const amountOfPages = Math.ceil(total / perPage);\n  const isFirstPage = currentPage - 1 === 0;\n  const isLastPage = currentPage === amountOfPages;\n  const isPrevPage = currentPage - 1 !== 0;\n  const isNextPage = currentPage + 1 !== amountOfPages + 1;\n\n  const visiblePages = () => {\n    const pages = [];\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 1; i <= amountOfPages; i++) {\n      pages.push(i);\n    }\n\n    return pages;\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', {\n        disabled: isFirstPage,\n      })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPage\n            ? 'true'\n            : 'false'}\n          onClick={() => (\n            isPrevPage && onPageChange(currentPage - 1)\n          )}\n        >\n          «\n        </a>\n      </li>\n\n      {visiblePages().map(page => {\n        const isCurrentPage = currentPage === page;\n\n        return (\n          <li\n            className={classNames('page-item', {\n              active: isCurrentPage,\n            })}\n            key={page}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className={classNames('page-link')}\n              href={`#${page}`}\n              onClick={() => (\n                !isCurrentPage && onPageChange(page)\n              )}\n            >\n              {page}\n            </a>\n          </li>\n        );\n      })}\n\n      <li className={classNames('page-item', {\n        disabled: isLastPage,\n      })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPage\n            ? 'true'\n            : 'false'}\n          onClick={() => (\n            isNextPage && onPageChange(currentPage + 1)\n          )}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n});\n","import React, { useCallback, useMemo, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination/Pagination';\n\nconst initialItems = getNumbers(1, 42);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [total] = useState(42);\n\n  const changePage = useCallback((page: number) => (\n    setCurrentPage(page)\n  ), []);\n\n  const itemsOnPage = useCallback((currPage: number, itemsPerPage: number) => {\n    const itemStart = itemsPerPage * (currPage - 1);\n    const itemEnd = itemStart + itemsPerPage + 1;\n\n    return [...initialItems].filter(i => (\n      i > itemStart && i < itemEnd));\n  }, []);\n\n  const visibleItems = useMemo(() => {\n    return itemsOnPage(currentPage, perPage);\n  }, [currentPage, perPage]);\n\n  if (currentPage > Math.ceil(total / perPage)) {\n    setCurrentPage(1);\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${visibleItems[0]} - ${visibleItems[visibleItems.length - 1]} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => setPerPage(Number(event.target.value))}\n          >\n            <option value={3}>3</option>\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={20}>20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={42}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={\n          useCallback((page: number) => changePage(page), [currentPage])\n        }\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          <li data-cy=\"item\" key={item}>\n            {`Item ${item}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}